#version 430
in vec2 texCoord;
in vec3 Normal;
in vec3 WorldPos;

out vec4 Color;

uniform sampler2D texColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform float lightIntensity;
uniform vec3 cameraPos;

void main()
{
	vec3 objectColor = texture(texColor, texCoord).rgb;
	//vec3 objectColor = vec3(0.4f, 0.4f, 0.4f);

	//ambient lighting
	float ambientStrength = 0.4;
	vec3 ambient = ambientStrength * lightColor;

	//diffuse lighting
	vec3 normal = normalize(Normal);
	vec3 lightDir = normalize(lightPos - WorldPos);
	float dotDiffuse = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = dotDiffuse * lightColor;

	//specular lighting
	vec3 viewDir = normalize(cameraPos - WorldPos);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(normal, halfwayDir), 0.0), 64);
	vec3 specular = spec * lightColor * lightIntensity;

	vec3 result = (ambient + diffuse) * objectColor;
	if (dot(normal, lightDir) > 0) { result = (ambient + diffuse + specular) * objectColor; }
	Color = vec4(result, 1.0f);
}